@model IEnumerable<DeviceDataCollector.Models.Device>
@using DeviceDataCollector.Helpers

@{
    ViewData["Title"] = "Devices";
}

<div class="container">
    <h1 class="mb-4">Connected Devices</h1>

    <div class="d-flex justify-content-between align-items-center mb-3">
        <div>
            <div id="refreshStatus" class="text-muted small">
                <i class="bi bi-arrow-clockwise"></i> Auto-refreshing every 60 seconds | Last update: <span id="lastRefreshTime">@DateTime.Now.ToDisplayFormat("HH:mm:ss")</span>
            </div>
        </div>
        <div>
            <button id="manualRefresh" class="btn btn-sm btn-outline-primary">
                <i class="bi bi-arrow-clockwise"></i> Refresh Now
            </button>
            <div class="form-check form-switch d-inline-block ms-2">
                <input class="form-check-input" type="checkbox" id="autoRefreshToggle" checked>
                <label class="form-check-label" for="autoRefreshToggle">Auto-refresh</label>
            </div>
        </div>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">
            <i class="bi bi-check-circle"></i> @TempData["SuccessMessage"]
        </div>
    }

    <div id="deviceListContainer">
        <div class="card mb-4">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">Device List</h5>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-striped table-hover mb-0">
                        <thead>
                            <tr>
                                <th>Serial Number</th>
                                <th>Name</th>
                                <th>Location</th>
                                <th>Status</th>
                                <th>Last Connection</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var device in Model)
                            {
                                <tr>
                                    <td><strong>@device.SerialNumber</strong></td>
                                    <td>@device.Name</td>
                                    <td>@(string.IsNullOrEmpty(device.Location) ? "-" : device.Location)</td>
                                    <td>
                                        @if (device.IsActive)
                                        {
                                            <span class="badge bg-success">Active</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Inactive</span>
                                        }
                                    </td>
                                    <td>
                                        @if (device.LastConnectionTime.HasValue)
                                        {
                                            <span title="@device.LastConnectionTime.Value.ToDisplayFormat()">
                                                @if ((DateTime.Now - device.LastConnectionTime.Value).TotalDays < 1)
                                                {
                                                    @device.LastConnectionTime.Value.ToDisplayFormat("HH:mm:ss")
                                                }
                                                else
                                                {
                                                    @device.LastConnectionTime.Value.ToDisplayFormat("yyyy-MM-dd")
                                                }
                                            </span>
                                        }
                                        else
                                        {
                                            <span>Never</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <a asp-action="Details" asp-route-id="@device.Id" class="btn btn-sm btn-info">
                                                <i class="bi bi-info-circle"></i> Details
                                            </a>
                                            <a asp-action="Donations" asp-route-id="@device.Id" class="btn btn-sm btn-primary">
                                                <i class="bi bi-droplet"></i> Donations
                                            </a>
                                            @if (User.IsInRole("Admin"))
                                            {
                                                <a asp-action="Edit" asp-route-id="@device.Id" class="btn btn-sm btn-warning">
                                                    <i class="bi bi-pencil"></i> Edit
                                                </a>
                                                <a asp-action="Delete" asp-route-id="@device.Id" class="btn btn-sm btn-danger">
                                                    <i class="bi bi-trash"></i> Delete
                                                </a>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        @if (!Model.Any())
        {
            <div class="alert alert-info">
                <i class="bi bi-info-circle"></i> No devices have connected yet. Devices will appear here automatically when they connect to the server.
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        // Auto-refresh functionality
        $(document).ready(function () {
            // Variables for auto-refresh
            const refreshInterval = 60 * 1000; // 60 seconds
            let autoRefreshTimer;
            let secondsCounter;
            let secondsLeft = refreshInterval / 1000;

            // Function to update devices list
            function refreshDevicesList() {
                $.ajax({
                    url: '@Url.Action("Index", "Devices")',
                    type: 'GET',
                    success: function (result) {
                        // Extract the device list from the full page
                        const newContent = $(result).find('#deviceListContainer').html();
                        $('#deviceListContainer').html(newContent);
                        updateLastRefreshTime();
                    },
                    error: function (error) {
                        console.error("Error refreshing device list:", error);
                    }
                });
            }

            // Function to update last refresh time
            function updateLastRefreshTime() {
                const now = new Date();
                const hours = String(now.getHours()).padStart(2, '0');
                const minutes = String(now.getMinutes()).padStart(2, '0');
                const seconds = String(now.getSeconds()).padStart(2, '0');
                $('#lastRefreshTime').text(`${hours}:${minutes}:${seconds}`);

                // Reset countdown
                secondsLeft = refreshInterval / 1000;
                updateRefreshStatus();
            }

            // Function to update refresh status text with countdown
            function updateRefreshStatus() {
                $('#refreshStatus').html(`<i class="bi bi-arrow-clockwise"></i> Auto-refreshing in ${secondsLeft} seconds | Last update: <span id="lastRefreshTime">${$('#lastRefreshTime').text()}</span>`);
            }

            // Start auto-refresh timer
            function startAutoRefresh() {
                // Clear any existing timers
                stopAutoRefresh();

                // Start new timer
                autoRefreshTimer = setInterval(refreshDevicesList, refreshInterval);

                // Start the countdown update
                secondsLeft = refreshInterval / 1000;
                secondsCounter = setInterval(function() {
                    secondsLeft--;
                    updateRefreshStatus();
                }, 1000);

                $('#autoRefreshToggle').prop('checked', true);
            }

            // Stop auto-refresh timer
            function stopAutoRefresh() {
                clearInterval(autoRefreshTimer);
                clearInterval(secondsCounter);
                $('#refreshStatus').html(`<i class="bi bi-clock-history"></i> Auto-refresh paused | Last update: <span id="lastRefreshTime">${$('#lastRefreshTime').text()}</span>`);
                $('#autoRefreshToggle').prop('checked', false);
            }

            // Initialize auto-refresh
            startAutoRefresh();

            // Handle manual refresh button
            $('#manualRefresh').click(function () {
                refreshDevicesList();
                // If auto-refresh is on, restart the timer
                if ($('#autoRefreshToggle').is(':checked')) {
                    startAutoRefresh();
                }
            });

            // Handle auto-refresh toggle
            $('#autoRefreshToggle').change(function () {
                if ($(this).is(':checked')) {
                    startAutoRefresh();
                } else {
                    stopAutoRefresh();
                }
            });
        });
    </script>
}